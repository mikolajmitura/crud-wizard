package pl.jalokim.crudwizard.generated.mapper;

import java.util.Optional;
import java.util.Map;
import pl.jalokim.crudwizard.genericapp.mapper.GenericMapperArgument;
import pl.jalokim.crudwizard.genericapp.mapper.generete.GeneratedMapper;
import pl.jalokim.crudwizard.genericapp.mapper.generete.GeneratedMethod;


class MsomeSimpleValueDtoModelToCSomeSimpleValueDtoMapper1 implements GeneratedMapper {

    MsomeSimpleValueDtoModelToCSomeSimpleValueDtoMapper1() {

    }

    @Override
    public pl.jalokim.crudwizard.core.sample.SomeSimpleValueDto mainMap(GenericMapperArgument genericMapperArgument) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Object sourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

		return new pl.jalokim.crudwizard.core.sample.SomeSimpleValueDto(

		((java.lang.String) Optional.ofNullable(sourceObject)
			.map(genericMap -> ((java.util.Map<java.lang.String, java.lang.Object>) genericMap).get("someString3"))
			.orElse(null)),

		((java.lang.Long) Optional.ofNullable(sourceObject)
			.map(genericMap -> ((java.util.Map<java.lang.String, java.lang.Object>) genericMap).get("someLong3"))
			.orElse(null)),

		((java.time.LocalDateTime) Optional.ofNullable(sourceObject)
			.map(genericMap -> ((java.util.Map<java.lang.String, java.lang.Object>) genericMap).get("someDataTime3"))
			.orElse(null))
        );
    }

}
