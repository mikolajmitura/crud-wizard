package pl.jalokim.crudwizard.generated.mapper;

import java.util.Optional;
import java.util.Map;
import pl.jalokim.crudwizard.genericapp.mapper.GenericMapperArgument;
import pl.jalokim.crudwizard.genericapp.mapper.generete.GeneratedMapper;
import pl.jalokim.crudwizard.genericapp.mapper.generete.GeneratedMethod;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Map;
import java.util.Set;

class CMappingCollectionsToMmappingCollectionsModelMapper implements GeneratedMapper {
		private final org.springframework.core.convert.ConversionService conversionService;
    CMappingCollectionsToMmappingCollectionsModelMapper(org.springframework.core.convert.ConversionService conversionService) {
		this.conversionService = conversionService;
    }

    @Override
    public Map<String, Object> mainMap(GenericMapperArgument genericMapperArgument) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Object sourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

		Map<String, Object> map = new java.util.HashMap<>();

		map.put("arrayList", ((java.util.List<Map<String, Object>>) mapCCollectionElementArrayOfCCollectionElementToCListOfMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement[]) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getArrayList())
			.orElse(null)))));

		map.put("arrayList2", ((java.util.List<Map<String, Object>>) mapCCollectionElementArrayOfCCollectionElementToCListOfMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement[]) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getArrayList2())
			.orElse(null)))));

		map.put("arraySet", ((java.util.Set<Map<String, Object>>) mapCCollectionElementArrayOfCCollectionElementToCSetOfMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement[]) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getArraySet())
			.orElse(null)))));

		map.put("listList", ((java.util.List<Map<String, Object>>) mapCListOfCCollectionElementToCListOfMcollectionElementModel(genericMapperArgument, ((java.util.List<pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement>) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getListList())
			.orElse(null)))));

		map.put("longs", ((java.lang.String[]) mapCListOfCLongToCStringArrayOfCString(genericMapperArgument, ((java.util.List<java.lang.Long>) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getLongs())
			.orElse(null)))));

		map.put("mappedListElementByProvidedMethod", ((java.util.List<Map<String, Object>>) mapCListOfCOtherElementCollectionToCListOfMotherElementCollectionModel(genericMapperArgument, ((java.util.List<pl.jalokim.crudwizard.genericapp.mapper.conversion.OtherElementCollection>) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getMappedListElementByProvidedMethod())
			.orElse(null)))));

		map.put("setSet", ((java.util.Set<Map<String, Object>>) mapCSetOfCCollectionElementToCSetOfMcollectionElementModel(genericMapperArgument, ((java.util.Set<pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement>) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getSetSet())
			.orElse(null)))));

		map.put("someMap", ((java.util.Map<java.lang.Long, Map<String, Object>>) mapCMapOfCStringAndCCollectionElementToCMapOfCLongAndMcollectionElementModel(genericMapperArgument, ((java.util.Map<java.lang.String, pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement>) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getSomeMap())
			.orElse(null)))));

		map.put("someOneField1", ((Map<String, Object>) mapCCollectionElementToMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getSomeOneField1())
			.orElse(null)))));

		map.put("someOneField2", ((Map<String, Object>) mapCCollectionElementToMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getSomeOneField2())
			.orElse(null)))));

		map.put("strings", ((java.util.Set<java.lang.String>) mapCListOfCStringToCSetOfCString(genericMapperArgument, ((java.util.List<java.lang.String>) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.MappingCollections) value).getStrings())
			.orElse(null)))));
        return (Map<String, Object>) map;
    }
    @GeneratedMethod
    public java.util.List<Map<String, Object>> mapCCollectionElementArrayOfCCollectionElementToCListOfMcollectionElementModel(GenericMapperArgument genericMapperArgument, pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement[] sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

        int initSize = sourceObject.length;
        List<Map<String, Object>> elements = new ArrayList<>(initSize);
        for (pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement element : sourceObject) {
            elements.add(((Map<String, Object>) mapCCollectionElementToMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) element))));
        }


        return elements;
    }

    @GeneratedMethod
    public java.util.Set<Map<String, Object>> mapCCollectionElementArrayOfCCollectionElementToCSetOfMcollectionElementModel(GenericMapperArgument genericMapperArgument, pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement[] sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

        int initSize = sourceObject.length;
        Set<Map<String, Object>> elements = new HashSet<>(initSize);
        for (pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement element : sourceObject) {
            elements.add(((Map<String, Object>) mapCCollectionElementToMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) element))));
        }


        return elements;
    }

    @GeneratedMethod
    public Map<String, Object> mapCCollectionElementToMcollectionElementModel(GenericMapperArgument genericMapperArgument, pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }


		Map<String, Object> map = new java.util.HashMap<>();

		map.put("field1", ((java.lang.String) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) value).getField1())
			.orElse(null)));

		map.put("field2", ((java.lang.String) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) value).getField2())
			.orElse(null)));

		map.put("field3", ((java.lang.Long) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) value).getField3())
			.orElse(null)));

		map.put("someObject", ((Map<String, Object>) mapCNestedElementObjectToMnestedElementObjectModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.NestedElementObject) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) value).getSomeObject())
			.orElse(null)))));
        return (Map<String, Object>) map;
    }

    @GeneratedMethod
    public java.util.List<Map<String, Object>> mapCListOfCCollectionElementToCListOfMcollectionElementModel(GenericMapperArgument genericMapperArgument, java.util.List<pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement> sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

        int initSize = sourceObject.size();
        List<Map<String, Object>> elements = new ArrayList<>(initSize);
        for (pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement element : sourceObject) {
            elements.add(((Map<String, Object>) mapCCollectionElementToMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) element))));
        }


        return elements;
    }

    @GeneratedMethod
    public java.lang.String[] mapCListOfCLongToCStringArrayOfCString(GenericMapperArgument genericMapperArgument, java.util.List<java.lang.Long> sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

        int initSize = sourceObject.size();
        int index = 0;
        java.lang.String[] elements = new java.lang.String[initSize];
        for (java.lang.Long element : sourceObject) {
            elements[index++] = conversionService.convert(((java.lang.Long) element), java.lang.String.class);
        }


        return elements;
    }

    @GeneratedMethod
    public java.util.List<Map<String, Object>> mapCListOfCOtherElementCollectionToCListOfMotherElementCollectionModel(GenericMapperArgument genericMapperArgument, java.util.List<pl.jalokim.crudwizard.genericapp.mapper.conversion.OtherElementCollection> sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

        int initSize = sourceObject.size();
        List<Map<String, Object>> elements = new ArrayList<>(initSize);
        for (pl.jalokim.crudwizard.genericapp.mapper.conversion.OtherElementCollection element : sourceObject) {
            elements.add(((Map<String, Object>) mapCOtherElementCollectionToMotherElementCollectionModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.OtherElementCollection) element))));
        }


        return elements;
    }

    @GeneratedMethod
    public java.util.Set<java.lang.String> mapCListOfCStringToCSetOfCString(GenericMapperArgument genericMapperArgument, java.util.List<java.lang.String> sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

        int initSize = sourceObject.size();
        Set<java.lang.String> elements = new HashSet<>(initSize);
        for (java.lang.String element : sourceObject) {
            elements.add(((java.lang.String) element));
        }


        return elements;
    }

    @GeneratedMethod
    public java.util.Map<java.lang.Long, Map<String, Object>> mapCMapOfCStringAndCCollectionElementToCMapOfCLongAndMcollectionElementModel(GenericMapperArgument genericMapperArgument, java.util.Map<java.lang.String, pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement> sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

        int initSize = sourceObject.size();
        Map<java.lang.Long, Map<String, Object>> elements = new HashMap<>(initSize);
        for (Entry<java.lang.String, pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement> element : sourceObject.entrySet()) {
            elements.put(conversionService.convert(((java.lang.String) element.getKey()), java.lang.Long.class), ((Map<String, Object>) mapCCollectionElementToMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) element.getValue()))));
        }


        return elements;
    }

    @GeneratedMethod
    public Map<String, Object> mapCNestedElementObjectToMnestedElementObjectModel(GenericMapperArgument genericMapperArgument, pl.jalokim.crudwizard.genericapp.mapper.conversion.NestedElementObject sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }


		Map<String, Object> map = new java.util.HashMap<>();

		map.put("name", ((java.lang.String) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.NestedElementObject) value).getName())
			.orElse(null)));

		map.put("surname", ((java.lang.String) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.NestedElementObject) value).getSurname())
			.orElse(null)));
        return (Map<String, Object>) map;
    }

    @GeneratedMethod
    public Map<String, Object> mapCOtherElementCollectionToMotherElementCollectionModel(GenericMapperArgument genericMapperArgument, pl.jalokim.crudwizard.genericapp.mapper.conversion.OtherElementCollection sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }


		Map<String, Object> map = new java.util.HashMap<>();

		map.put("othElemField1", ((java.lang.String) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.OtherElementCollection) value).getOthElemField1())
			.orElse(null)));

		map.put("othElemField2", ((java.lang.String) Optional.ofNullable(sourceObject)
			.map(value -> ((pl.jalokim.crudwizard.genericapp.mapper.conversion.OtherElementCollection) value).getOthElemField2())
			.orElse(null)));
        return (Map<String, Object>) map;
    }

    @GeneratedMethod
    public java.util.Set<Map<String, Object>> mapCSetOfCCollectionElementToCSetOfMcollectionElementModel(GenericMapperArgument genericMapperArgument, java.util.Set<pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement> sourceObject) {
        Object rootSourceObject = genericMapperArgument.getSourceObject();
        Map<String, String> headers = genericMapperArgument.getHeaders();
        Map<String, Object> pathVariables = genericMapperArgument.getPathVariables();
        Map<String, Object> requestParams = genericMapperArgument.getRequestParams();
        Map<String, Object> mappingContext = genericMapperArgument.getMappingContext();

        if (sourceObject == null) {
            return null;
        }

        int initSize = sourceObject.size();
        Set<Map<String, Object>> elements = new HashSet<>(initSize);
        for (pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement element : sourceObject) {
            elements.add(((Map<String, Object>) mapCCollectionElementToMcollectionElementModel(genericMapperArgument, ((pl.jalokim.crudwizard.genericapp.mapper.conversion.CollectionElement) element))));
        }


        return elements;
    }

}
